多级反馈队列调度算法简介

无论是在批处理系统还是分时系统中，用户进程数一般都多于处理机数, 这将导致它们互相争夺处理机。另外，系统进程也同样需要使用处理机。这就要求进程调度程序按一定的策略，动态地把处理机分配给处于就绪队列中的某一个进程，以使之执行。因此，我们需要用到一些调度方式来解决进程互相争夺资源，使得每个进程都很好的使用的处理机。


多级反馈队列调度算法 就是一种CPU处理机调度算法，是目前公认的较好的一种进程调度算法，它能较好的满足各类进程的需要，UNIX操作系统采取的便是这种调度算法。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业(进程)迅速完成。具体实现如下：


应设置多个就绪队列，并为各个队列赋予不同的优先级。

第一个队列的优先级最高，第二个队列次之，其余各队列的优先权逐个降低。该算法赋予各个队列中进程执行时间片的大小也各不相同，在优先权愈高的队列中，为每个进程所规定的执行时间片就愈小。

当一个新进程进入内存后，首先将它放入第一队列的末尾，按FCFS原则排队等待调度。当轮到该进程执行时，如它能在该时间片内完成，便可准备撤离系统；如果它在一个时间片结束时尚未完成，调度程序便将该进程转入第二队列的末尾，再同样地按FCFS原则等待调度执行；如果它在第二队列中运行一个时间片后仍未完成，再依次将它放入第三队列，……，如此下去，当一个长作业(进程)从第一队列依次降到第n队列后，在第n队列中便采取按时间片轮转的方式运行。

仅当第一队列空闲时，调度程序才调度第二队列中的进程运行； 仅当第1~(i-1) 队列均空时，才会调度第i队列中的进程运行。如果处理机正在第i队列中为某进程服务时，又有新进程进入优先权较高的队列(第1~(i-1)中的任何一个队列)，则此时新进程将抢占正在运行进程的处理机，即由调度程序把正在运行的进程放回到第i队列的末尾，把处理机分配给新到的高优先权进程。
————————————————
版权声明：本文为CSDN博主「WuchangI」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/WuchangI/article/details/80432794


需求分析和设计
采用多级反馈队列调度算法进行进程调度的模拟。

每个进程对应一个 PCB。在 PCB 中包括进程标识符 pid、进程的状态标识 status、进程优先级 priority、表示进程生命周期的数据项 life（在实际系统中不包括该项）。
创建进程时即创建一个 PCB，各个进程的 pid 都是唯一的，pid 是在 1 到 100 范围内的一个整数。
可以创建一个下标为 1 到 100 的布尔数组， “假”表示下标对应的进程标识号是空闲的，“真”表示下标对应的进程标识号已分配给某个进程。
进程状态 status 的取值为“就绪 ready”或“运行 run”，刚创建时，状态为“ready”。被进程调度程序选中后变为“run”。
进程优先级 priority 是 0（最低） 到 49（最高） 范围内的一个随机整数。
进程生命周期 life 是 1 到 5 范围内的一个随机整数。
初始化时，创建 50 个就绪队列，各就绪队列的进程优先级 priority 分别是 0 到 49。
为了模拟用户动态提交任务的过程，要求动态创建进程。进入进程调度循环后，每次按 ctrl+f 即动态创建一个进程，然后将该 PCB 插入就绪队列中。
在进程调度循环中，每次选择优先级大的就绪进程来执行。将其状态从就绪变为运行，通过延时一段时间来模拟该进程执行一个时间片 的过程，然后优先级减半，生命周期减一。
如果将该运行进程的生命周期不为 0，则重新把它变为就绪状态，插入就绪队列中；否则该进程执行完成，撤消其 PCB。以上为一次进程调度循环。
设计图形用户界面 GUI，在窗口中显示该进程和其他所有进程的 PCB 内容。
————————————————
版权声明：本文为CSDN博主「WuchangI」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/WuchangI/article/details/80432794
