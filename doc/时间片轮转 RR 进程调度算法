Java 实现--时间片轮转 RR 进程调度算法
https://www.cnblogs.com/rese-t/p/8067210.html
时间片轮转（Round-Robin）调度算法是操作系统一种比较公平的进程调度的方式，
这种方式使得就绪队列上的所有进程在每次轮转时都可以运行相同的一个时间片。

基本原理
算法实现原理是，按进程到达顺序（FCFS 原则）将进程依次加入就绪队列当中，
然后将 CPU 分配给位于队首的进程，确定一个时间片，让该进程执行一个时间片。
当该进程执行时间到时，该进程可能已经执行完毕（可能在时间片未到时就以及执行完毕），
或者未执行完毕，如果是前者只需将进程弹出队列即可，如果是后者则将该进程加入队尾，
并将 CPU 分配给新的队首进程，如此循环。

进程切换时机
进程在执行时分为两种情况

在该时间片内进程执行完毕，这种情况调度程序将立即把该进程弹出队列，并把 CPU 分配给新的队首进程
在该时间片内进程未执行完毕，调度程序将立即中断该进程执行，把该进程加入队尾，并将 CPU 分配给新的队首进程

时间片大小的确定
在 RR 算法中，时间片的大小直接影响了系统的性能。
时间片过小，有利于短作业，但是会频繁地切换进程，增加了系统的开销，影响性能。
时间片过大，算法退化成 FCFS 算法，如果某个短作业进程之前的进程都是长作业，将导致后面的短作业进程长时间等待。

有关的计算
周转时间 = 进程完成时间 - 进程到达时间
带权周转时间 = 进程周转时间 / 进程实际运行时间
平均周转时间 = （进程1周转时间 + ... + 进程n周转时间）/ n
平均带权周转时间 = （进程1带权周转时间 + ... + 进程n带权周转时间）/ n